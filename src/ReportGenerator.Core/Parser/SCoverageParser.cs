using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;
using Palmmedia.ReportGenerator.Core.Common;
using Palmmedia.ReportGenerator.Core.Logging;
using Palmmedia.ReportGenerator.Core.Parser.Analysis;
using Palmmedia.ReportGenerator.Core.Parser.Filtering;
using Palmmedia.ReportGenerator.Core.Properties;

namespace Palmmedia.ReportGenerator.Core.Parser
{
    /// <summary>
    /// Parser for XML reports generated by scoverage .
    /// </summary>
    internal class SCoverageParser : ParserBase
    {
        /// <summary>
        /// The Logger.
        /// </summary>
        private static readonly ILogger Logger = LoggerFactory.GetLogger(typeof(SCoverageParser));

        /// <summary>
        /// Initializes a new instance of the <see cref="SCoverageParser" /> class.
        /// </summary>
        /// <param name="assemblyFilter">The assembly filter.</param>
        /// <param name="classFilter">The class filter.</param>
        /// <param name="fileFilter">The file filter.</param>
        internal SCoverageParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter)
            : base(assemblyFilter, classFilter, fileFilter)
        {
        }

        /// <summary>
        /// Parses the given XML report.
        /// </summary>
        /// <param name="report">The XML report.</param>
        /// <returns>The parser result.</returns>
        public ParserResult Parse(XContainer report)
        {
            if (report == null)
            {
                throw new ArgumentNullException(nameof(report));
            }

            var assemblies = new List<Assembly>();

            var assemblyElementGrouping = report.Descendants("package")
                .GroupBy(m => m.Attribute("name").Value)
                .Where(a => this.AssemblyFilter.IsElementIncludedInReport(a.Key))
                .ToArray();

            foreach (var elements in assemblyElementGrouping)
            {
                assemblies.Add(this.ProcessAssembly(elements.ToArray(), elements.Key));
            }

            var result = new ParserResult(assemblies.OrderBy(a => a.Name).ToList(), true, this.ToString());

            try
            {
                if (report.Element("packages")?.Parent.Attribute("timestamp") != null)
                {
                    DateTime timeStamp = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
                    double seconds = double.Parse(report.Element("packages").Parent.Attribute("timestamp").Value) / 1000;
                    timeStamp = timeStamp.AddSeconds(seconds).ToLocalTime();

                    result.MinimumTimeStamp = timeStamp;
                    result.MaximumTimeStamp = timeStamp;
                }
            }
            catch (Exception)
            {
                // Ignore since timestamp is not relevant. If timestamp is missing or in wrong format the information is just missing in the report(s)
            }

            return result;
        }

        /// <summary>
        /// Processes the given assembly.
        /// </summary>
        /// <param name="modules">The modules.</param>
        /// <param name="assemblyName">Name of the assembly.</param>
        /// <returns>The <see cref="Assembly"/>.</returns>
        private Assembly ProcessAssembly(XElement[] modules, string assemblyName)
        {
            Logger.DebugFormat(Resources.CurrentAssembly, assemblyName);

            var classes = modules
                .Elements("classes")
                .Elements("class")
                .ToArray();

            var classNames = classes
                .Select(c => c.Attribute("name").Value)
                .Distinct()
                .Where(c => this.ClassFilter.IsElementIncludedInReport(c))
                .OrderBy(c => c)
                .ToArray();

            var assembly = new Assembly(assemblyName);

            Parallel.ForEach(classNames, c => this.ProcessClass(classes, assembly, c));

            return assembly;
        }

        /// <summary>
        /// Processes the given class.
        /// </summary>
        /// <param name="allClasses">All class elements.</param>
        /// <param name="assembly">The assembly.</param>
        /// <param name="className">Name of the class.</param>
        private void ProcessClass(XElement[] allClasses, Assembly assembly, string className)
        {
            bool FilterClass(XElement element)
            {
                var name = element.Attribute("name").Value;

                return name.Equals(className)
                    || (name.StartsWith(className, StringComparison.Ordinal)
                        && (name[className.Length] == '$'
                            || name[className.Length] == '/'
                            || name[className.Length] == '.'));
            }

            var classes = allClasses
                .Where(FilterClass)
                .ToArray();

            var files = classes
                .Select(c => c.Attribute("filename").Value)
                .Distinct()
                .ToArray();

            var filteredFiles = files
                .Where(f => this.FileFilter.IsElementIncludedInReport(f))
                .ToArray();

            // If all files are removed by filters, then the whole class is omitted
            if ((files.Length == 0 && !this.FileFilter.HasCustomFilters) || filteredFiles.Length > 0)
            {
                var @class = new Class(className, assembly);

                foreach (var file in filteredFiles)
                {
                    var fileClasses = classes
                        .Where(c => c.Attribute("filename").Value.Equals(file))
                        .ToArray();
                    @class.AddFile(this.ProcessFile(fileClasses, @class, className, file));
                }

                assembly.AddClass(@class);
            }
        }

        /// <summary>
        /// Processes the file.
        /// </summary>
        /// <param name="classElements">The class elements for the file.</param>
        /// <param name="class">The class.</param>
        /// <param name="className">Name of the class.</param>
        /// <param name="filePath">The file path.</param>
        /// <returns>The <see cref="CodeFile"/>.</returns>
        private CodeFile ProcessFile(XElement[] classElements, Class @class, string className, string filePath)
        {
            var methodsOfFile = classElements
                .Elements("methods")
                .Elements("method")
                .ToArray();

            var lines = methodsOfFile.Elements("statements")
                .Elements("statement")
                .ToArray();

            var anyUncoveredBranchByLine = lines
                .GroupBy(l => l.Attribute("line").Value)
                .Where(g => g.Any(l => l.Attribute("branch").Value == "true"))
                .ToDictionary(g => int.Parse(g.Key), g => g.Any(l => l.Attribute("invocation-count").Value == "0"));

            var lineNumbers = lines
                .Select(l => l.Attribute("line").Value)
                .ToHashSet();

            var linesOfFile = lines
                .Select(line => new
                {
                    LineNumber = int.Parse(line.Attribute("line").Value, CultureInfo.InvariantCulture),
                    Visits = line.Attribute("invocation-count").Value.ParseLargeInteger()
                })
                .OrderBy(seqpnt => seqpnt.LineNumber)
                .ToArray();

            var branches = GetBranches(lines);

            int[] coverage = new int[] { };
            LineVisitStatus[] lineVisitStatus = new LineVisitStatus[] { };

            if (linesOfFile.Length > 0)
            {
                coverage = new int[linesOfFile[linesOfFile.LongLength - 1].LineNumber + 1];
                lineVisitStatus = new LineVisitStatus[linesOfFile[linesOfFile.LongLength - 1].LineNumber + 1];

                for (int i = 0; i < coverage.Length; i++)
                {
                    coverage[i] = -1;
                }

                foreach (var line in linesOfFile)
                {
                    coverage[line.LineNumber] = Math.Max(line.Visits, coverage[line.LineNumber]);

                    bool partiallyCovered = false;

                    if (anyUncoveredBranchByLine.TryGetValue(line.LineNumber, out bool hasUncoveredBranch))
                    {
                        partiallyCovered = hasUncoveredBranch;
                    }

                    LineVisitStatus statusOfLine = coverage[line.LineNumber] > 0 ? (partiallyCovered ? LineVisitStatus.PartiallyCovered : LineVisitStatus.Covered) : LineVisitStatus.NotCovered;
                    lineVisitStatus[line.LineNumber] = statusOfLine;
                }
            }

            var codeFile = new CodeFile(filePath, coverage, lineVisitStatus, branches);

            SetMethodMetrics(codeFile, methodsOfFile);
            SetCodeElements(codeFile, methodsOfFile);

            return codeFile;
        }

        /// <summary>
        /// Extracts the metrics from the given <see cref="XElement">XElements</see>.
        /// </summary>
        /// <param name="codeFile">The code file.</param>
        /// <param name="methodsOfFile">The methods of the file.</param>
        private static void SetMethodMetrics(CodeFile codeFile, IEnumerable<XElement> methodsOfFile)
        {
            foreach (var method in methodsOfFile)
            {
                string methodName = method.Attribute("name").Value;

                string shortName = GetShortMethodName(methodName);

                var metrics = new List<Metric>();

                var statementRate = method.Attribute("statement-rate");

                decimal? coveragePercent = null;
                if (statementRate != null)
                {
                    coveragePercent = decimal.Parse(statementRate.Value, CultureInfo.InvariantCulture);

                    metrics.Add(Metric.Coverage(coveragePercent));
                }

                var branchRate = method.Attribute("branch-rate");

                if (branchRate != null)
                {
                    decimal? value = decimal.Parse(branchRate.Value, CultureInfo.InvariantCulture);

                    metrics.Add(Metric.BranchCoverage(value));
                }

                var methodMetric = new MethodMetric(methodName, shortName, metrics);

                var line = method
                    .Elements("statements")
                    .Elements("statement")
                    .FirstOrDefault();

                if (line != null)
                {
                    methodMetric.Line = int.Parse(line.Attribute("line").Value, CultureInfo.InvariantCulture);
                }

                codeFile.AddMethodMetric(methodMetric);
            }
        }

        /// <summary>
        /// Gets the branches by line number.
        /// </summary>
        /// <param name="lines">The lines.</param>
        /// <returns>The branches by line number.</returns>
        private static Dictionary<int, ICollection<Branch>> GetBranches(IEnumerable<XElement> lines)
        {
            var result = new Dictionary<int, ICollection<Branch>>();

            var linesWithBranches = lines
                .Where(l => l.Attribute("branch").Value == "true")
                .GroupBy(l => l.Attribute("line").Value)
                .ToArray();

            foreach (var lineGroup in linesWithBranches)
            {
                var branches = new HashSet<Branch>();

                foreach (var line in lineGroup)
                {
                    string identifier = string.Format(
                        CultureInfo.InvariantCulture,
                        "{0}_{1}_{2}",
                        lineGroup.Key,
                        line.Attribute("start"),
                        line.Attribute("end"));

                    int lineCount = int.Parse(line.Attribute("invocation-count").Value, CultureInfo.InvariantCulture);

                    branches.Add(new Branch(lineCount, identifier));
                }

                result.Add(int.Parse(lineGroup.Key, CultureInfo.InvariantCulture), branches);
            }

            return result;
        }

        private static string GetShortMethodName(string fullName)
        {
            int indexOpen = fullName.IndexOf('(');

            if (indexOpen <= 0)
            {
                return fullName;
            }

            int indexClose = fullName.IndexOf(')');
            string signature = indexClose - indexOpen > 1 ? "(...)" : "()";

            return $"{fullName.Substring(0, indexOpen)}{signature}";
        }

        /// <summary>
        /// Extracts the methods/properties of the given <see cref="XElement">XElements</see>.
        /// </summary>
        /// <param name="codeFile">The code file.</param>
        /// <param name="methodsOfFile">The methods of the file.</param>
        private static void SetCodeElements(CodeFile codeFile, IEnumerable<XElement> methodsOfFile)
        {
            foreach (var method in methodsOfFile)
            {
                string methodName = method.Attribute("name").Value;

                var lines = method.Elements("statements")
                    .Elements("statement")
                    .Select(line => int.Parse(line.Attribute("line").Value, CultureInfo.InvariantCulture))
                    .OrderBy(line => line)
                    .ToArray();

                if (lines.Length > 0)
                {
                    int firstLine = lines[0];
                    int lastLine = lines[lines.Length - 1];

                    codeFile.AddCodeElement(new CodeElement(
                        methodName,
                        methodName,
                        CodeElementType.Method,
                        firstLine,
                        lastLine,
                        codeFile.CoverageQuotaInRange(firstLine, lastLine)));
                }
            }
        }
    }
}
