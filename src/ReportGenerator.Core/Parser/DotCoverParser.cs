using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml.Linq;
using Palmmedia.ReportGenerator.Core.Logging;
using Palmmedia.ReportGenerator.Core.Parser.Analysis;
using Palmmedia.ReportGenerator.Core.Parser.Filtering;
using Palmmedia.ReportGenerator.Core.Properties;

namespace Palmmedia.ReportGenerator.Core.Parser
{
    /// <summary>
    /// Parser for XML reports generated by dotCover.
    /// </summary>
    internal class DotCoverParser : ParserBase
    {
        /// <summary>
        /// The Logger.
        /// </summary>
        private static readonly ILogger Logger = LoggerFactory.GetLogger(typeof(DotCoverParser));

        /// <summary>
        /// Regex to analyze if a method name belongs to a lamda expression.
        /// </summary>
        private static readonly Regex LambdaMethodNameRegex = new Regex(@"<.+>.+__.+\(.*\)", RegexOptions.Compiled);

        /// <summary>
        /// Regex to analyze if a method name is generated by compiler.
        /// </summary>
        private static readonly Regex CompilerGeneratedMethodNameRegex = new Regex(@"<(?<CompilerGeneratedName>.+)>.+__.+MoveNext\(\):.+$", RegexOptions.Compiled);

        /// <summary>
        /// Regex to analyze if a method name is a nested method (a method nested within a method).
        /// </summary>
        private static readonly Regex LocalFunctionMethodNameRegex = new Regex(@"^.*(?<ParentMethodName><.+>).*__(?<NestedMethodName>[^\|]+)\|.+\((?<Arguments>.*)\):.+$", RegexOptions.Compiled);

        /// <summary>
        /// Regex to analyze if a type name is a generated nested type (e.g. an async method).
        /// </summary>
        private static readonly Regex GeneratedClassNameRegex = new Regex("<.*>.+__", RegexOptions.Compiled);

        /// <summary>
        /// Initializes a new instance of the <see cref="DotCoverParser" /> class.
        /// </summary>
        /// <param name="assemblyFilter">The assembly filter.</param>
        /// <param name="classFilter">The class filter.</param>
        /// <param name="fileFilter">The file filter.</param>
        internal DotCoverParser(IFilter assemblyFilter, IFilter classFilter, IFilter fileFilter)
            : base(assemblyFilter, classFilter, fileFilter)
        {
        }

        /// <summary>
        /// Parses the given XML report.
        /// </summary>
        /// <param name="report">The XML report.</param>
        /// <returns>The parser result.</returns>
        public ParserResult Parse(XContainer report)
        {
            if (report == null)
            {
                throw new ArgumentNullException(nameof(report));
            }

            var assemblies = new List<Assembly>();

            var modules = report.Descendants("Assembly")
                .ToArray();
            var files = report.Descendants("File").ToArray();

            var assemblyNames = modules
                .Select(m => m.Attribute("Name").Value)
                .Distinct()
                .Where(a => this.AssemblyFilter.IsElementIncludedInReport(a))
                .OrderBy(a => a)
                .ToArray();

            foreach (var assemblyName in assemblyNames)
            {
                assemblies.Add(this.ProcessAssembly(modules, files, assemblyName));
            }

            var result = new ParserResult(assemblies.OrderBy(a => a.Name).ToList(), false, this.ToString());
            return result;
        }

        /// <summary>
        /// Processes the given assembly.
        /// </summary>
        /// <param name="modules">The modules.</param>
        /// <param name="files">The files.</param>
        /// <param name="assemblyName">Name of the assembly.</param>
        /// <returns>The <see cref="Assembly"/>.</returns>
        private Assembly ProcessAssembly(XElement[] modules, XElement[] files, string assemblyName)
        {
            Logger.DebugFormat(Resources.CurrentAssembly, assemblyName);

            var assemblyElement = modules
                .Where(m => m.Attribute("Name").Value.Equals(assemblyName));

            var allTypes = this.GetAllTypes(assemblyElement.ToList());
            var classNames = allTypes
                .Select(this.GetFullTypeName)
                .Distinct()
                .Where(c => this.ClassFilter.IsElementIncludedInReport(c))
                .OrderBy(name => name)
                .ToArray();

            var assembly = new Assembly(assemblyName);

            Parallel.ForEach(classNames, className => this.ProcessClass(modules, files, assembly, className));

            return assembly;
        }

        /// <summary>
        /// Processes the given class.
        /// </summary>
        /// <param name="modules">The modules.</param>
        /// <param name="files">The files.</param>
        /// <param name="assembly">The assembly.</param>
        /// <param name="className">Name of the class.</param>
        private void ProcessClass(XElement[] modules, XElement[] files, Assembly assembly, string className)
        {
            var assemblyElement = modules
                .Where(m => m.Attribute("Name").Value.Equals(assembly.Name));

            var allTypes = this.GetAllTypes(assemblyElement.ToList());
            var fileIdsOfClass = allTypes
                .Where(c => this.GetFullTypeName(c).Equals(className))
                .SelectMany(c => this.DescendantsNotInOtherType(c, "Statement"))
                .Select(c => c.Attribute("FileIndex").Value)
                .Distinct()
                .ToArray();

            var filteredFilesOfClass = fileIdsOfClass
                .Select(fileId =>
                    new
                    {
                        FileId = fileId,
                        FilePath = files.First(f => f.Attribute("Index").Value == fileId).Attribute("Name").Value
                    })
                .Where(f => this.FileFilter.IsElementIncludedInReport(f.FilePath))
                .ToArray();

            // If all files are removed by filters, then the whole class is omitted
            if ((fileIdsOfClass.Length == 0 && !this.FileFilter.HasCustomFilters) || filteredFilesOfClass.Length > 0)
            {
                var @class = new Class(className, assembly);

                foreach (var file in filteredFilesOfClass)
                {
                    @class.AddFile(this.ProcessFile(modules, file.FileId, @class, file.FilePath));
                }

                assembly.AddClass(@class);
            }
        }

        /// <summary>
        /// Processes the file.
        /// </summary>
        /// <param name="modules">The modules.</param>
        /// <param name="fileId">The file id.</param>
        /// <param name="class">The class.</param>
        /// <param name="filePath">The file path.</param>
        /// <returns>The <see cref="CodeFile"/>.</returns>
        private CodeFile ProcessFile(XElement[] modules, string fileId, Class @class, string filePath)
        {
            var assemblyElement = modules
                .Where(m => m.Attribute("Name").Value.Equals(@class.Assembly.Name));

            var allTypes = this.GetAllTypes(assemblyElement.ToList());
            var classType = allTypes
                .Where(c => this.GetFullTypeName(c).Equals(@class.Name));
            var methodsOfFile = classType
               .SelectMany( c => this.DescendantsNotInOtherType(c, "Method"))
               .ToArray();

            var statements = methodsOfFile
               .Elements("Statement")
               .Where(c => c.Attribute("FileIndex").Value == fileId)
               .Select(c => new
               {
                   LineNumberStart = int.Parse(c.Attribute("Line").Value, CultureInfo.InvariantCulture),
                   LineNumberEnd = int.Parse(c.Attribute("EndLine").Value, CultureInfo.InvariantCulture),
                   Visited = c.Attribute("Covered").Value == "True"
               })
               .OrderBy(seqpnt => seqpnt.LineNumberEnd)
               .ToArray();

            int[] coverage = { };
            LineVisitStatus[] lineVisitStatus = { };

            if (statements.Length > 0)
            {
                int lastCoveredLine = statements[statements.LongLength - 1].LineNumberEnd + 1;
                coverage = new int[lastCoveredLine];
                lineVisitStatus = new LineVisitStatus[lastCoveredLine];

                for (int i = 0; i < coverage.Length; i++)
                {
                    coverage[i] = -1;
                }

                foreach (var statement in statements)
                {
                    for (int lineNumber = statement.LineNumberStart; lineNumber <= statement.LineNumberEnd; lineNumber++)
                    {
                        int visits = statement.Visited ? 1 : 0;
                        coverage[lineNumber] = coverage[lineNumber] == -1 ? visits : Math.Min(coverage[lineNumber] + visits, 1);
                        lineVisitStatus[lineNumber] = lineVisitStatus[lineNumber] == LineVisitStatus.Covered || statement.Visited ? LineVisitStatus.Covered : LineVisitStatus.NotCovered;
                    }
                }
            }

            var codeFile = new CodeFile(filePath, coverage, lineVisitStatus);

            this.SetCodeElements(codeFile, fileId, methodsOfFile);

            return codeFile;
        }

        /// <summary>
        /// Extracts the methods/properties of the given <see cref="XElement">XElements</see>.
        /// </summary>
        /// <param name="codeFile">The code file.</param>
        /// <param name="fileId">The id of the file.</param>
        /// <param name="methods">The methods.</param>
        private void SetCodeElements(CodeFile codeFile, string fileId, IEnumerable<XElement> methods)
        {
            foreach (var method in methods)
            {
                string methodName = ExtractMethodName(this.GetFullTypeName(method.Parent), method.Attribute("Name").Value);

                if (LambdaMethodNameRegex.IsMatch(methodName))
                {
                    continue;
                }

                CodeElementType type = CodeElementType.Method;

                if (methodName.StartsWith("get_", StringComparison.OrdinalIgnoreCase)
                    || methodName.StartsWith("set_", StringComparison.OrdinalIgnoreCase))
                {
                    type = CodeElementType.Property;
                    methodName = methodName.Substring(4);
                }

                var seqpnts = method
                    .Elements("Statement")
                    .Where(c => c.Attribute("FileIndex").Value == fileId)
                    .Select(c => new
                    {
                        LineNumberStart = int.Parse(c.Attribute("Line").Value, CultureInfo.InvariantCulture),
                        LineNumberEnd = int.Parse(c.Attribute("EndLine").Value, CultureInfo.InvariantCulture)
                    })
                    .ToArray();

                if (seqpnts.Length > 0)
                {
                    int firstLine = seqpnts.Min(s => s.LineNumberStart);
                    int lastLine = seqpnts.Max(s => s.LineNumberEnd);

                    codeFile.AddCodeElement(new CodeElement(
                        methodName,
                        type,
                        seqpnts.Min(s => s.LineNumberStart),
                        seqpnts.Max(s => s.LineNumberEnd),
                        codeFile.CoverageQuotaInRange(firstLine, lastLine)));
                }
            }
        }

        /// <summary>
        /// Extracts the method name. For async methods the original name is returned.
        /// </summary>
        /// <param name="typeName">The name of the class.</param>
        /// <param name="methodName">The full method name.</param>
        /// <returns>The method name.</returns>
        private static string ExtractMethodName(string typeName, string methodName)
        {
            if (typeName.Contains("|") || methodName.Contains("|"))
            {
                Match match = LocalFunctionMethodNameRegex.Match(typeName + methodName);

                if (match.Success)
                {
                    return match.Groups["NestedMethodName"].Value + "(" + match.Groups["Arguments"].Value + ")";
                }
            }
            else if (methodName.Contains("MoveNext()"))
            {
                Match match = CompilerGeneratedMethodNameRegex.Match(typeName + methodName);

                if (match.Success)
                {
                    return match.Groups["CompilerGeneratedName"].Value + "()";
                }
            }

            return methodName.Substring(0, methodName.LastIndexOf(':'));
        }

        /// <summary>
        /// Gets the full type name from the provided XElement.
        /// </summary>
        /// <param name="type">The XElement representing the type.</param>
        /// <returns>The full type name.</returns>
        private string GetFullTypeName(XElement type)
        {
            if (type.Name != "Type")
            {
                throw new Exception("Element is not a type");
            }

            var name = type.Attribute("Name").Value;
            while (type.Parent != null)
            {
                type = type.Parent;

                // do not use assembly name
                if (type.Name == "Assembly")
                {
                    break;
                }

                name = $"{type.Attribute("Name").Value}.{name}";
            }

            return name;
        }

        /// <summary>
        /// Retrieves all types from the given list of elements.
        /// </summary>
        /// <param name="elements">The list of elements to retrieve types from.</param>
        /// <returns>An array of XElement representing the retrieved types.</returns>
        private XElement[] GetAllTypes(List<XElement> elements)
        {
            var types = elements.Elements("Namespace")
                .Elements("Type")
                .Concat(elements.Elements("Type"))
                .Where(c => !GeneratedClassNameRegex.IsMatch(c.Attribute("Name").Value))
                .ToList();
            if (types.Any())
            {
                types.AddRange(this.GetAllTypes(types));
            }

            return types.ToArray();
        }

        /// <summary>
        /// Retrieves all descendants of the specified element that have the specified name, excluding those that are within a "Type" element whose "Name" attribute matches the generated class name pattern.
        /// </summary>
        /// <param name="element">The element to search within.</param>
        /// <param name="name">The name of the descendants to retrieve.</param>
        /// <returns>An enumerable collection of XElement objects representing the descendants of the specified element that have the specified name.</returns>
        private IEnumerable<XElement> DescendantsNotInOtherType(XElement element, XName name)
        {
            foreach (var child in element.Elements())
            {
                if (child.Name == "Type" && !GeneratedClassNameRegex.IsMatch(child.Attribute("Name").Value))
                {
                    continue;
                }

                if (child.Name == name)
                {
                    yield return child;
                }

                foreach (var descendent in this.DescendantsNotInOtherType(child, name))
                {
                    yield return descendent;
                }
            }
        }
    }
}
