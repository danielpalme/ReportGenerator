<?xml version="1.0" encoding="utf-8"?>
<CoverageReport scope="Test.TestClass2">
  <Summary>
    <Class>Test.TestClass2</Class>
    <Assembly>Sample</Assembly>
    <Files>
      <File>C:\temp\TestClass2.cs</File>
    </Files>
    <Coveredlines>24</Coveredlines>
    <Uncoveredlines>14</Uncoveredlines>
    <Coverablelines>38</Coverablelines>
    <Totallines>85</Totallines>
    <Linecoverage>63.1</Linecoverage>
    <Coveredbranches>1</Coveredbranches>
    <Totalbranches>2</Totalbranches>
    <Branchcoverage>50</Branchcoverage>
    <Coveredmethods>6</Coveredmethods>
    <Fullcoveredmethods>4</Fullcoveredmethods>
    <Totalmethods>10</Totalmethods>
    <Methodcoverage>60</Methodcoverage>
    <Fullmethodcoverage>40</Fullmethodcoverage>
  </Summary>
  <Metrics>
    <Element name="ctor">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>0</Sequencecoverage>
      <Branchcoverage>0</Branchcoverage>
      <CrapScore>2</CrapScore>
    </Element>
    <Element name="ctor">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>100</Sequencecoverage>
      <Branchcoverage>100</Branchcoverage>
      <CrapScore>1</CrapScore>
    </Element>
    <Element name="ExecutedMethod">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>100</Sequencecoverage>
      <Branchcoverage>100</Branchcoverage>
      <CrapScore>1</CrapScore>
    </Element>
    <Element name="UnExecutedMethod">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>0</Sequencecoverage>
      <Branchcoverage>0</Branchcoverage>
      <CrapScore>2</CrapScore>
    </Element>
    <Element name="SampleFunction">
      <Cyclomaticcomplexity>5</Cyclomaticcomplexity>
      <NPathcomplexity>2</NPathcomplexity>
      <Sequencecoverage>100</Sequencecoverage>
      <Branchcoverage>66.67</Branchcoverage>
      <CrapScore>5</CrapScore>
    </Element>
    <Element name="DoSomething">
      <Cyclomaticcomplexity>1</Cyclomaticcomplexity>
      <NPathcomplexity>0</NPathcomplexity>
      <Sequencecoverage>0</Sequencecoverage>
      <Branchcoverage>0</Branchcoverage>
      <CrapScore>2</CrapScore>
    </Element>
  </Metrics>
  <Files>
    <File name="C:\temp\TestClass2.cs">
      <LineAnalysis line="1" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System;" />
      <LineAnalysis line="2" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Collections.Generic;" />
      <LineAnalysis line="3" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="using System.Linq;" />
      <LineAnalysis line="4" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="5" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="namespace Test" />
      <LineAnalysis line="6" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="{" />
      <LineAnalysis line="7" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    class TestClass2" />
      <LineAnalysis line="8" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    {" />
      <LineAnalysis line="9" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        private string name;" />
      <LineAnalysis line="10" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="11" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        private Dictionary&lt;string, int&gt; dict = new Dictionary&lt;string, int&gt;();" />
      <LineAnalysis line="12" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="13" visits="3" coverage="Covered" coveredbranches="" totalbranches="" content="        public string ExecutedProperty { get; set; }" />
      <LineAnalysis line="14" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="15" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public string UnExecutedProperty { get; set; }" />
      <LineAnalysis line="16" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="17" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        public TestClass2()" />
      <LineAnalysis line="18" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="19" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            this.name = &quot;Nobody&quot;;" />
      <LineAnalysis line="20" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            this.ExecutedProperty = &quot;Nobody&quot;;" />
      <LineAnalysis line="21" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="22" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="23" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        public TestClass2(string name)" />
      <LineAnalysis line="24" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="25" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            this.name = name;" />
      <LineAnalysis line="26" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="            this.ExecutedProperty = name + name;" />
      <LineAnalysis line="27" visits="2" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="28" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="29" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void ExecutedMethod()" />
      <LineAnalysis line="30" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="31" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            Console.WriteLine(this.name);" />
      <LineAnalysis line="32" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            Console.WriteLine(this.ExecutedProperty);" />
      <LineAnalysis line="33" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="34" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="35" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void UnExecutedMethod()" />
      <LineAnalysis line="36" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="37" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            Console.WriteLine(this.name);" />
      <LineAnalysis line="38" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            Console.WriteLine(this.ExecutedProperty);" />
      <LineAnalysis line="39" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="40" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="41" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public void SampleFunction(string city)" />
      <LineAnalysis line="42" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="43" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            int[] values = new int[] { 0, 1, 2, 3 };" />
      <LineAnalysis line="44" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="45" visits="5" coverage="Covered" coveredbranches="" totalbranches="" content="            var doubled = values.Select(i =&gt; i * 2);" />
      <LineAnalysis line="46" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="47" visits="11" coverage="Covered" coveredbranches="" totalbranches="" content="            foreach (var item in doubled)" />
      <LineAnalysis line="48" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="49" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="                Console.WriteLine(item);" />
      <LineAnalysis line="50" visits="4" coverage="Covered" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="51" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="52" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            string[] cities = new string[] { &quot;Berlin&quot;, &quot;Munich&quot;, &quot;Paris&quot; };" />
      <LineAnalysis line="53" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="54" visits="4" coverage="PartiallyCovered" coveredbranches="1" totalbranches="2" content="            if (cities.SingleOrDefault(c =&gt; c.Equals(city, StringComparison.OrdinalIgnoreCase)) != null)" />
      <LineAnalysis line="55" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            {" />
      <LineAnalysis line="56" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="                Console.WriteLine(&quot;Found &quot; + city);" />
      <LineAnalysis line="57" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="            }" />
      <LineAnalysis line="58" visits="1" coverage="Covered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="59" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="" />
      <LineAnalysis line="60" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="        public string DoSomething(string value," />
      <LineAnalysis line="61" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            string[] stringArray," />
      <LineAnalysis line="62" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            Guid id," />
      <LineAnalysis line="63" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            IEnumerable&lt;string&gt; stringEnumerable," />
      <LineAnalysis line="64" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            IList&lt;string&gt; stringList," />
      <LineAnalysis line="65" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            decimal dec," />
      <LineAnalysis line="66" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            int i," />
      <LineAnalysis line="67" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            Dictionary&lt;string, int&gt; dict," />
      <LineAnalysis line="68" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            out int g," />
      <LineAnalysis line="69" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            float fff," />
      <LineAnalysis line="70" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            double dou," />
      <LineAnalysis line="71" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            bool bo," />
      <LineAnalysis line="72" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            byte by," />
      <LineAnalysis line="73" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            char ch," />
      <LineAnalysis line="74" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            object o," />
      <LineAnalysis line="75" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            sbyte sby," />
      <LineAnalysis line="76" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            short sh," />
      <LineAnalysis line="77" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            uint ui," />
      <LineAnalysis line="78" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            ulong ul," />
      <LineAnalysis line="79" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="            ushort usho)" />
      <LineAnalysis line="80" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        {" />
      <LineAnalysis line="81" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            g = 0;" />
      <LineAnalysis line="82" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="            return null;" />
      <LineAnalysis line="83" visits="0" coverage="NotCovered" coveredbranches="" totalbranches="" content="        }" />
      <LineAnalysis line="84" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="    }" />
      <LineAnalysis line="85" visits="-1" coverage="NotCoverable" coveredbranches="" totalbranches="" content="}" />
    </File>
  </Files>
</CoverageReport>